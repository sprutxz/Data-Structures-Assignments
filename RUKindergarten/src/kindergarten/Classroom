package kindergarten;

import java.text.BreakIterator;

/**
 * This class represents a Classroom, with:
 * - an SNode instance variable for students in line,
 * - an SNode instance variable for musical chairs, pointing to the last student in the list,
 * - a boolean array for seating availability (eg. can a student sit in a given seat), and
 * - a Student array parallel to seatingAvailability to show students filed into seats 
 * --- (more formally, seatingAvailability[i][j] also refers to the same seat in studentsSitting[i][j])
 * 
 * @author Ethan Chou
 * @author Kal Pandit
 * @author Maksims Kurjanovics Kravcenko
 */
public class Classroom {
    private SNode studentsInLine;             // when students are in line: references the FIRST student in the LL
    private SNode musicalChairs;              // when students are in musical chairs: references the LAST student in the CLL
    private boolean[][] seatingAvailability;  // represents the classroom seats that are available to students
    private Student[][] studentsSitting;      // when students are sitting in the classroom: contains the students

    /**
     * Constructor for classrooms. Do not edit.
     * @param l passes in students in line
     * @param m passes in musical chairs
     * @param a passes in availability
     * @param s passes in students sitting
     */
    public Classroom ( SNode l, SNode m, boolean[][] a, Student[][] s ) {
		studentsInLine      = l;
        musicalChairs       = m;
		seatingAvailability = a;
        studentsSitting     = s;
	}
    /**
     * Default constructor starts an empty classroom. Do not edit.
     */
    public Classroom() {
        this(null, null, null, null);
    }

    /**
     * This method simulates students coming into the classroom and standing in line.
     * 
     * Reads students from input file and inserts these students in alphabetical 
     * order to studentsInLine singly linked list.
     * 
     * Input file has:
     * 1) one line containing an integer representing the number of students in the file, say x
     * 2) x lines containing one student per line. Each line has the following student 
     * information separated by spaces: FirstName LastName Height
     * 
     * @param filename the student information input file
     */
    public void makeClassroom ( String filename ) {

        // WRITE YOUR CODE HERE
        StdIn.setFile(filename);
        int studentCount = StdIn.readInt();
        studentsInLine = new SNode();
        studentsInLine.setStudent(new Student(StdIn.readString(), StdIn.readString(), StdIn.readInt()));
        for (int i = 1; i < studentCount; i ++){

            Student student = new Student(StdIn.readString(), StdIn.readString(), StdIn.readInt());
            SNode newNode = new SNode();
            newNode.setStudent(student);

            SNode ptr = studentsInLine;
            SNode prevPtr = null;
            while(ptr != null && ptr.getStudent().compareNameTo(student)<=0){
                prevPtr = ptr;
                ptr = ptr.getNext();
            }
            if(prevPtr == null){
                studentsInLine = newNode;
                newNode.setNext(ptr);
            }else{
                prevPtr.setNext(newNode);
                newNode.setNext(ptr);
            }
        }
    }

    /**
     * 
     * This method creates and initializes the seatingAvailability (2D array) of 
     * available seats inside the classroom. Imagine that unavailable seats are broken and cannot be used.
     * 
     * Reads seating chart input file with the format:
     * An integer representing the number of rows in the classroom, say r
     * An integer representing the number of columns in the classroom, say c
     * Number of r lines, each containing c true or false values (true denotes an available seat)
     *  
     * This method also creates the studentsSitting array with the same number of
     * rows and columns as the seatingAvailability array
     * 
     * This method does not seat students on the seats.
     * 
     * @param seatingChart the seating chart input file
     */
    public void setupSeats(String seatingChart) {

	// WRITE YOUR CODE HERE
        StdIn.setFile(seatingChart);
        int rows = StdIn.readInt();
        int cols = StdIn.readInt();
        seatingAvailability = new boolean [rows][cols];
        studentsSitting = new Student [rows][cols];
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < cols; j++){
                seatingAvailability[i][j] = StdIn.readBoolean();
            }
        }
    }

    /**
     * 
     * This method simulates students taking their seats in the classroom.
     * 
     * 1. seats any remaining students from the musicalChairs starting from the front of the list
     * 2. starting from the front of the studentsInLine singly linked list
     * 3. removes one student at a time from the list and inserts them into studentsSitting according to
     *    seatingAvailability
     * 
     * studentsInLine will then be empty
     */
    public void seatStudents () {

	// WRITE YOUR CODE HERE
        SNode ptr = studentsInLine;
        
        for (int i = 0; i < seatingAvailability.length; i++){
            for (int j = 0; j < seatingAvailability[i].length; j ++){
                if (seatingAvailability[i][j] && ptr != null){

                    if (musicalChairs != null){
                        studentsSitting[i][j] = musicalChairs.getStudent();
                        musicalChairs = null;
                    }else {
                        studentsSitting[i][j] = ptr.getStudent();
                        ptr = ptr.getNext();
                        studentsInLine = null;
                    }

                }
            }
        }
    }

    /**
     * Traverses studentsSitting row-wise (starting at row 0) removing a seated
     * student and adding that student to the end of the musicalChairs list.
     * 
     * row-wise: starts at index [0][0] traverses the entire first row and then moves
     * into second row.
     */
    public void insertMusicalChairs () {
        
        // WRITE YOUR CODE HERE

        for (int i = 0; i < seatingAvailability.length; i++){
            for (int j = 0; j < seatingAvailability[i].length; j++){

                if (seatingAvailability[i][j] && studentsSitting[i][j] != null){
                    Student student = studentsSitting[i][j];
                    studentsSitting[i][j] = null;

                    SNode newNode = new SNode();
                    newNode.setStudent(student);

                    if (musicalChairs == null){
                        musicalChairs = new SNode(student, null);
                        musicalChairs.setNext(musicalChairs);
                    }else{
                        newNode.setNext(musicalChairs.getNext());
                        musicalChairs.setNext(newNode);
                        musicalChairs = newNode;
                    }

                }
            }
        }
     }

    /**
     * 
     * This method repeatedly removes students from the musicalChairs until there is only one
     * student (the winner).
     * 
     * Choose a student to be elimnated from the musicalChairs using StdRandom.uniform(int b),
     * where b is the number of students in the musicalChairs. 0 is the first student in the 
     * list, b-1 is the last.
     * 
     * Removes eliminated student from the list and inserts students back in studentsInLine 
     * in ascending height order (shortest to tallest).
     * 
     * The last line of this method calls the seatStudents() method so that students can be seated.
     */
    public void playMusicalChairs() {

        // WRITE YOUR CODE HERE
        
        SNode ptr = new SNode();
        Student student = new Student();
        int studentsPlaying = 1;
        for ( ptr = musicalChairs.getNext(); ptr != musicalChairs; ptr = ptr.getNext() ) {
            studentsPlaying++;
        }

        //elimination loop
        while(studentsPlaying != 1){
            SNode prev = musicalChairs;
            int removeNode = StdRandom.uniform(studentsPlaying);
            ptr = musicalChairs;
            for (int i = 0; i <= removeNode; i++){
                prev = ptr;
                ptr = ptr.getNext();
            }
            student = ptr.getStudent();

            //removes elim student from musicalChairs
            if (ptr == musicalChairs){
                prev.setNext(ptr.getNext());
                musicalChairs = prev;
            }else{
                prev.setNext(ptr.getNext());
            }

            //creates new node based on student elim from musicalChairs
            SNode newNode = new SNode();
            newNode.setStudent(student);

            //finds the previous and next node of the location where the node needs to be inserted
            ptr = studentsInLine;
            SNode prevPtr = null;
            while(ptr != null && ptr.getStudent().getHeight()<student.getHeight()){
                prevPtr = ptr;
                ptr = ptr.getNext();
            }

            //inserts node in the right place in the linked list
            if(prevPtr == null){
                newNode.setNext(ptr);
                studentsInLine = newNode;
            }else{
                prevPtr.setNext(newNode);
                newNode.setNext(ptr);
            }
            studentsPlaying--; //removes one from total students playing varaible
        }
        seatStudents();
    } 

    /**
     * Insert a student to wherever the students are at (ie. whatever activity is not empty)
     * Note: adds to the end of either linked list or the next available empty seat
     * @param firstName the first name
     * @param lastName the last name
     * @param height the height of the student
     */
    public void addLateStudent ( String firstName, String lastName, int height ) {
        
        // WRITE YOUR CODE HERE
        
        if (studentsInLine != null)
        {
            SNode ptr = studentsInLine;

            while (ptr.getNext() != null){
                ptr = ptr.getNext();
            }

            ptr.setNext(new SNode(new Student(firstName, lastName, height), null));

        }else if (musicalChairs != null){
            SNode newNode = new SNode(new Student(firstName, lastName, height), null);

            newNode.setNext(musicalChairs.getNext());
            musicalChairs.setNext(newNode);
            musicalChairs = newNode;

        }else{
            int i, j;
            Student student = new Student(firstName, lastName, height);

            breakpoint:
            for (i = 0; i < studentsSitting.length; i++){
                for (j = 0; j < studentsSitting[0].length; j++){
                    if(seatingAvailability[i][j] && studentsSitting[i][j] == null){
                        studentsSitting[i][j] = student;
                        break breakpoint;
                    }
                }
            }
            
        }
    }

    /**
     * A student decides to leave early
     * This method deletes an early-leaving student from wherever the students 
     * are at (ie. whatever activity is not empty)
     * 
     * Assume the student's name is unique
     * 
     * @param firstName the student's first name
     * @param lastName the student's last name
     */
    public void deleteLeavingStudent ( String firstName, String lastName ) {

        // WRITE YOUR CODE HERE
        String fullName = firstName + " " + lastName;

        if (studentsInLine != null) //student are in studentsInLine
        {
            SNode ptr = studentsInLine;
            if(ptr.getStudent().getFullName().equalsIgnoreCase(fullName)){
                studentsInLine = studentsInLine.getNext();
            }else {
                SNode prev = ptr;
                ptr = ptr.getNext();
                while (ptr!=null && !ptr.getStudent().getFullName().equalsIgnoreCase(fullName)){
                    prev = ptr;
                    ptr = ptr.getNext();
                }
                if (ptr!=null && ptr.getStudent().getFullName().equalsIgnoreCase(fullName))
                    prev.setNext(ptr.getNext());
            }

        }else if(musicalChairs != null) //students are in musicalChairs
        {
            SNode ptr = musicalChairs;
            SNode prev = musicalChairs;

            if (ptr.getStudent().getFullName().equalsIgnoreCase(fullName))  {
                while (ptr.getNext() != musicalChairs){
                    ptr = ptr.getNext();
                }

                ptr.setNext(musicalChairs.getNext());
                musicalChairs = ptr;
            
            }else{
                ptr = ptr.getNext();

                while (!ptr.getStudent().getFullName().equalsIgnoreCase(fullName) && ptr != musicalChairs){
                    prev = ptr;
                    ptr = ptr.getNext();
                }
                if (ptr.getStudent().getFullName().equalsIgnoreCase(fullName))
                    prev.setNext(ptr.getNext());
            }

        }else //students are sitting
        {
            for (int i = 0; i < seatingAvailability.length; i++){
                for (int j = 0; j < seatingAvailability[0].length; j++){

                    if (seatingAvailability[i][j]){
                        if (studentsSitting[i][j] != null &&
                            studentsSitting[i][j].getFullName().equalsIgnoreCase(fullName))
                                studentsSitting[i][j] = null;
                    }

                }
            }
        }

    }

    /**
     * Used by driver to display students in line
     * DO NOT edit.
     */
    public void printStudentsInLine () {

        //Print studentsInLine
        StdOut.println ( "Students in Line:" );
        if ( studentsInLine == null ) { StdOut.println("EMPTY"); }

        for ( SNode ptr = studentsInLine; ptr != null; ptr = ptr.getNext() ) {
            StdOut.print ( ptr.getStudent().print() );
            if ( ptr.getNext() != null ) { StdOut.print ( " -> " ); }
        }
        StdOut.println();
        StdOut.println();
    }

    /**
     * Prints the seated students; can use this method to debug.
     * DO NOT edit.
     */
    public void printSeatedStudents () {

        StdOut.println("Sitting Students:");

        if ( studentsSitting != null ) {
        
            for ( int i = 0; i < studentsSitting.length; i++ ) {
                for ( int j = 0; j < studentsSitting[i].length; j++ ) {

                    String stringToPrint = "";
                    if ( studentsSitting[i][j] == null ) {

                        if (seatingAvailability[i][j] == false) {stringToPrint = "X";}
                        else { stringToPrint = "EMPTY"; }

                    } else { stringToPrint = studentsSitting[i][j].print();}

                    StdOut.print ( stringToPrint );
                    
                    for ( int o = 0; o < (10 - stringToPrint.length()); o++ ) {
                        StdOut.print (" ");
                    }
                }
                StdOut.println();
            }
        } else {
            StdOut.println("EMPTY");
        }
        StdOut.println();
    }

    /**
     * Prints the musical chairs; can use this method to debug.
     * DO NOT edit.
     */
    public void printMusicalChairs () {
        StdOut.println ( "Students in Musical Chairs:" );

        if ( musicalChairs == null ) {
            StdOut.println("EMPTY");
            StdOut.println();
            return;
        }
        SNode ptr;
        for ( ptr = musicalChairs.getNext(); ptr != musicalChairs; ptr = ptr.getNext() ) {
            StdOut.print(ptr.getStudent().print() + " -> ");
        }
        if ( ptr == musicalChairs) {
            StdOut.print(musicalChairs.getStudent().print() + " - POINTS TO FRONT");
        }
        StdOut.println();
    }

    /**
     * Prints the state of the classroom; can use this method to debug.
     * DO NOT edit.
     */
    public void printClassroom() {
        printStudentsInLine();
        printSeatedStudents();
        printMusicalChairs();
    }

    /**
     * Used to get and set objects.
     * DO NOT edit.
     */

    public SNode getStudentsInLine() { return studentsInLine; }
    public void setStudentsInLine(SNode l) { studentsInLine = l; }

    public SNode getMusicalChairs() { return musicalChairs; }
    public void setMusicalChairs(SNode m) { musicalChairs = m; }

    public boolean[][] getSeatingAvailability() { return seatingAvailability; }
    public void setSeatingAvailability(boolean[][] a) { seatingAvailability = a; }

    public Student[][] getStudentsSitting() { return studentsSitting; }
    public void setStudentsSitting(Student[][] s) { studentsSitting = s; }

}
